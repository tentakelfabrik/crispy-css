/**
 * mixins
 *
 *
 *
 * @author Bj√∂rn Hase
 * @license http://opensource.org/licenses/MIT The MIT License
 * @link https://gitlab.tentakelfabrik.de/tentakelfabrik/crispy
 *
 */


/**
 * clearfix to end floating
 *
 *
 *
 */
@mixin crispy__clearfix() {
    &::before,
    &::after {
        display: table;
        content: ' ';
    }

    &::after {
        clear: both;
    }
}


/**
 * clear styles from list
 *
 *
 */
@mixin crispy__clear_list() {
    list-style: none;
    margin: 0;
    padding: 0;

    li {
        margin: 0;
        padding: 0;
    }
}


/**
 * media-queries
 *
 *
 *
 *
 *
 */
@mixin crispy__media-xs() {
    @media only screen and (min-width:$crispy__xs) {
        @content;
    }
}

@mixin crispy__media-sm() {
    @media only screen and (min-width: $crispy__sm) {
        @content;
    }
}

@mixin crispy__media-md() {
    @media only screen and (min-width: $crispy__md) {
        @content;
    }
}

@mixin crispy__media-lg() {
    @media only screen and (min-width: $crispy__lg) {
        @content;
    }
}

@mixin crispy__media-xlg() {
    @media only screen and (min-width: $crispy__xlg) {
        @content;
    }
}

@mixin crispy__media-xs-only() {
    @media only screen and (min-width: $crispy__xs) and (max-width: $crispy__sm - 1) {
        @content;
    }
}

@mixin crispy__media-sm-only() {
    @media only screen and (min-width: $crispy__sm) and (max-width: $crispy__md - 1) {
        @content;
    }
}

@mixin crispy__media-md-only() {
    @media only screen and (min-width: $crispy__md) and (max-width: $crispy__lg - 1) {
        @content;
    }
}

@mixin crispy__media-lg-only() {
    @media only screen and (min-width: $crispy__lg) and (max-width: $crispy__xlg - 1) {
        @content;
    }
}

@mixin crispy__media-xlg-only() {
    @media only screen and (min-width: $crispy__xlg) {
        @content;
    }
}


/**
 *  triangle
 *
 *
 *  @param {Direction} $direction - Triangle direction, either 'top', 'right', 'bottom' or 'left'
 *  @param {Color} $color [currentcolor] - Triangle color
 *  @param {Length} $size [1em] - Triangle size
 *
 */
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    z-index: 2;
    border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left: $perpendicular-borders;
        border-right: $perpendicular-borders;
    } @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top: $perpendicular-borders;
    }
}
