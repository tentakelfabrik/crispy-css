/**
 * functions to convert px to em and rem
 *
 *
 * @author Bj√∂rn Hase
 *
 */


 /**
  * to em, wrapper of toRelatives
  *
  * @param  {mixed} $values
  * @param  {mixed} $base
  * @return {rem}
  */
@function toEm($values, $base: $crispy__font-size) {
    @return toRelatives($values, 1em, $base);
}

/**
 * to rem, wrapper of toRelatives
 *
 * @param  {mixed} $values
 * @param  {mixed} $base
 * @return {rem}
 */
@function toRem($values, $base: $crispy__font-size) {
    @return toRelatives($values, 1rem, $base);
}

/**
 * values to relative
 *
 * @param  {mixed} $values
 * @param  {mixed} $unit
 * @param  {mixed} $base
 * @return {number}
 */
@function toRelatives($values, $unit, $base: $crispy__font-size) {
    @if type-of($values) == 'number' {
		$results: toRelative($values, $base: $crispy__font-size);
    } else {
        $results: ();

        @each $value in $values {
			@if $value == 0 {
				$results: append($results, $value);
			}
			@else {
				$results: append($results, toRelative($value, $base) * $unit);
			}
        }
    }

    @return $results;
}

/**
 * to relative
 *
 * @param  {mixed} $value
 * @param  {mixed} $base
 * @return {number}
 */
@function toRelative($value, $base: $crispy__font-size) {
    @return stripUnit($value) / $base;
}

/**
 * strip unit from value
 *
 * @param  {mixed} $value
 * @return {number}
 */
@function stripUnit($value) {
    @return $value / ($value * 0 + 1);
}
